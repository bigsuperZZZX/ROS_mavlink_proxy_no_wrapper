# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/CommandLong.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CommandLong(genpy.Message):
  _md5sum = "fa6caa6eedcb0ef38370683dbbc48671"
  _type = "ros_mavlink_proxy/CommandLong"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for COMMAND_LONG ( #76 )
# zxzxzxzx

std_msgs/Header header


uint8 target_system
uint8 target_component	#Component which should execute the command, 0 for all components
uint16 command		#Command ID (of command to send).
uint8 confirmation		#0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
float32 param1			#Parameter 1 (for the specific command).
float32 param2			#Parameter 2 (for the specific command).
float32 param3			#Parameter 3 (for the specific command).
float32 param4			#Parameter 4 (for the specific command).
float32 param5			#Parameter 5 (for the specific command).
float32 param6			#Parameter 6 (for the specific command).
float32 param7			#Parameter 7 (for the specific command).

uint8 origin_system_id
uint8 target_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','target_system','target_component','command','confirmation','param1','param2','param3','param4','param5','param6','param7','origin_system_id','target_system_id']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint16','uint8','float32','float32','float32','float32','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,target_system,target_component,command,confirmation,param1,param2,param3,param4,param5,param6,param7,origin_system_id,target_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommandLong, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.command is None:
        self.command = 0
      if self.confirmation is None:
        self.confirmation = 0
      if self.param1 is None:
        self.param1 = 0.
      if self.param2 is None:
        self.param2 = 0.
      if self.param3 is None:
        self.param3 = 0.
      if self.param4 is None:
        self.param4 = 0.
      if self.param5 is None:
        self.param5 = 0.
      if self.param6 is None:
        self.param6 = 0.
      if self.param7 is None:
        self.param7 = 0.
      if self.origin_system_id is None:
        self.origin_system_id = 0
      if self.target_system_id is None:
        self.target_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.target_system = 0
      self.target_component = 0
      self.command = 0
      self.confirmation = 0
      self.param1 = 0.
      self.param2 = 0.
      self.param3 = 0.
      self.param4 = 0.
      self.param5 = 0.
      self.param6 = 0.
      self.param7 = 0.
      self.origin_system_id = 0
      self.target_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BHB7f2B().pack(_x.target_system, _x.target_component, _x.command, _x.confirmation, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.origin_system_id, _x.target_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.target_system, _x.target_component, _x.command, _x.confirmation, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.origin_system_id, _x.target_system_id,) = _get_struct_2BHB7f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BHB7f2B().pack(_x.target_system, _x.target_component, _x.command, _x.confirmation, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.origin_system_id, _x.target_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.target_system, _x.target_component, _x.command, _x.confirmation, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.origin_system_id, _x.target_system_id,) = _get_struct_2BHB7f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BHB7f2B = None
def _get_struct_2BHB7f2B():
    global _struct_2BHB7f2B
    if _struct_2BHB7f2B is None:
        _struct_2BHB7f2B = struct.Struct("<2BHB7f2B")
    return _struct_2BHB7f2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
