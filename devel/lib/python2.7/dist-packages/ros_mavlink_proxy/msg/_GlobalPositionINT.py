# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/GlobalPositionINT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GlobalPositionINT(genpy.Message):
  _md5sum = "cff51bdfb07d5e1d0adb9ed0fb44f2f8"
  _type = "ros_mavlink_proxy/GlobalPositionINT"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for GLOBAL_POSITION_INT ( #33 )
# "INT" is the name of a coordinate system
# zxzxzxzx
std_msgs/Header header

uint32 time_boot_ms	#ms	Timestamp (time since system boot).
int32 lat		#degE7	Latitude, expressed
int32 lon		#degE7	Longitude, expressed
int32 alt		#mm	Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
int32 relative_alt	#mm	Altitude above ground
int16 vx		#cm/s	Ground X Speed (Latitude, positive north)
int16 vy		#cm/s	Ground Y Speed (Longitude, positive east)
int16 vz		#cm/s	Ground Z Speed (Altitude, positive down)
uint16 hdg		#cdeg	Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX

uint8 origin_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_boot_ms','lat','lon','alt','relative_alt','vx','vy','vz','hdg','origin_system_id']
  _slot_types = ['std_msgs/Header','uint32','int32','int32','int32','int32','int16','int16','int16','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_boot_ms,lat,lon,alt,relative_alt,vx,vy,vz,hdg,origin_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalPositionINT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.alt is None:
        self.alt = 0
      if self.relative_alt is None:
        self.relative_alt = 0
      if self.vx is None:
        self.vx = 0
      if self.vy is None:
        self.vy = 0
      if self.vz is None:
        self.vz = 0
      if self.hdg is None:
        self.hdg = 0
      if self.origin_system_id is None:
        self.origin_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_boot_ms = 0
      self.lat = 0
      self.lon = 0
      self.alt = 0
      self.relative_alt = 0
      self.vx = 0
      self.vy = 0
      self.vz = 0
      self.hdg = 0
      self.origin_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I4i3hHB().pack(_x.time_boot_ms, _x.lat, _x.lon, _x.alt, _x.relative_alt, _x.vx, _x.vy, _x.vz, _x.hdg, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.time_boot_ms, _x.lat, _x.lon, _x.alt, _x.relative_alt, _x.vx, _x.vy, _x.vz, _x.hdg, _x.origin_system_id,) = _get_struct_I4i3hHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I4i3hHB().pack(_x.time_boot_ms, _x.lat, _x.lon, _x.alt, _x.relative_alt, _x.vx, _x.vy, _x.vz, _x.hdg, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.time_boot_ms, _x.lat, _x.lon, _x.alt, _x.relative_alt, _x.vx, _x.vy, _x.vz, _x.hdg, _x.origin_system_id,) = _get_struct_I4i3hHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4i3hHB = None
def _get_struct_I4i3hHB():
    global _struct_I4i3hHB
    if _struct_I4i3hHB is None:
        _struct_I4i3hHB = struct.Struct("<I4i3hHB")
    return _struct_I4i3hHB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
