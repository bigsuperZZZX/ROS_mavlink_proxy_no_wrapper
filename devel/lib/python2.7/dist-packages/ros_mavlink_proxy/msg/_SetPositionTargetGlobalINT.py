# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/SetPositionTargetGlobalINT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SetPositionTargetGlobalINT(genpy.Message):
  _md5sum = "3a05b877f670b45909e756be5c21b8f2"
  _type = "ros_mavlink_proxy/SetPositionTargetGlobalINT"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for SET_POSITION_TARGET_GLOBAL_INT ( #86 )
# "INT" is the name of a coordinate system
# zxzxzxzx

std_msgs/Header header

uint32 time_boot_ms       #ms		Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
uint8 target_system       #		System ID
uint8 target_component    #		Component ID
uint8 coordinate_frame    #		Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
uint16 type_mask          #		Bitmap to indicate which dimensions should be ignored by the vehicle.
int32 lat_int             #degE7	X Position in WGS84 frame
int32 lon_int             #degE7	Y Position in WGS84 frame
float32 alt                   #m		Altitude (MSL, Relative to home, or AGL - depending on frame)
float32 vx                    #m/s	X velocity in NED frame
float32 vy                    #m/s	Y velocity in NED frame
float32 vz                    #m/s	Z velocity in NED frame
float32 afx                   #m/s/s	X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 afy                   #m/s/s	Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 afz                   #m/s/s	Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 yaw                   #rad	yaw setpoint
float32 yaw_rate              #rad/s	yaw rate setpoint

uint8 origin_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_boot_ms','target_system','target_component','coordinate_frame','type_mask','lat_int','lon_int','alt','vx','vy','vz','afx','afy','afz','yaw','yaw_rate','origin_system_id']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint8','uint8','uint16','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_boot_ms,target_system,target_component,coordinate_frame,type_mask,lat_int,lon_int,alt,vx,vy,vz,afx,afy,afz,yaw,yaw_rate,origin_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetPositionTargetGlobalINT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.coordinate_frame is None:
        self.coordinate_frame = 0
      if self.type_mask is None:
        self.type_mask = 0
      if self.lat_int is None:
        self.lat_int = 0
      if self.lon_int is None:
        self.lon_int = 0
      if self.alt is None:
        self.alt = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.afx is None:
        self.afx = 0.
      if self.afy is None:
        self.afy = 0.
      if self.afz is None:
        self.afz = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.origin_system_id is None:
        self.origin_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_boot_ms = 0
      self.target_system = 0
      self.target_component = 0
      self.coordinate_frame = 0
      self.type_mask = 0
      self.lat_int = 0
      self.lon_int = 0
      self.alt = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.afx = 0.
      self.afy = 0.
      self.afz = 0.
      self.yaw = 0.
      self.yaw_rate = 0.
      self.origin_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3BH2i9fB().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.lat_int, _x.lon_int, _x.alt, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.lat_int, _x.lon_int, _x.alt, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id,) = _get_struct_I3BH2i9fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3BH2i9fB().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.lat_int, _x.lon_int, _x.alt, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.lat_int, _x.lon_int, _x.alt, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id,) = _get_struct_I3BH2i9fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I3BH2i9fB = None
def _get_struct_I3BH2i9fB():
    global _struct_I3BH2i9fB
    if _struct_I3BH2i9fB is None:
        _struct_I3BH2i9fB = struct.Struct("<I3BH2i9fB")
    return _struct_I3BH2i9fB
