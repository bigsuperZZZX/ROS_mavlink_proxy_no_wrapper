# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/Altitude.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Altitude(genpy.Message):
  _md5sum = "68ad96eb6432bcb3e2b661f47f5f0f0b"
  _type = "ros_mavlink_proxy/Altitude"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for ALTITUDE ( #141 )
# zxzxzxzx

std_msgs/Header header

uint64 time_usec		#us	Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
float32 altitude_monotonic	#m	This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
float32 altitude_amsl		#m	This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.
float32 altitude_local		#m	This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
float32 altitude_relative		#m	This is the altitude above the home position. It resets on each change of the current home position.
float32 altitude_terrain		#m	This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
float32 bottom_clearance		#m	This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.

uint8 origin_system_id
uint8 target_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_usec','altitude_monotonic','altitude_amsl','altitude_local','altitude_relative','altitude_terrain','bottom_clearance','origin_system_id','target_system_id']
  _slot_types = ['std_msgs/Header','uint64','float32','float32','float32','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_usec,altitude_monotonic,altitude_amsl,altitude_local,altitude_relative,altitude_terrain,bottom_clearance,origin_system_id,target_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Altitude, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_usec is None:
        self.time_usec = 0
      if self.altitude_monotonic is None:
        self.altitude_monotonic = 0.
      if self.altitude_amsl is None:
        self.altitude_amsl = 0.
      if self.altitude_local is None:
        self.altitude_local = 0.
      if self.altitude_relative is None:
        self.altitude_relative = 0.
      if self.altitude_terrain is None:
        self.altitude_terrain = 0.
      if self.bottom_clearance is None:
        self.bottom_clearance = 0.
      if self.origin_system_id is None:
        self.origin_system_id = 0
      if self.target_system_id is None:
        self.target_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_usec = 0
      self.altitude_monotonic = 0.
      self.altitude_amsl = 0.
      self.altitude_local = 0.
      self.altitude_relative = 0.
      self.altitude_terrain = 0.
      self.bottom_clearance = 0.
      self.origin_system_id = 0
      self.target_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Q6f2B().pack(_x.time_usec, _x.altitude_monotonic, _x.altitude_amsl, _x.altitude_local, _x.altitude_relative, _x.altitude_terrain, _x.bottom_clearance, _x.origin_system_id, _x.target_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.time_usec, _x.altitude_monotonic, _x.altitude_amsl, _x.altitude_local, _x.altitude_relative, _x.altitude_terrain, _x.bottom_clearance, _x.origin_system_id, _x.target_system_id,) = _get_struct_Q6f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Q6f2B().pack(_x.time_usec, _x.altitude_monotonic, _x.altitude_amsl, _x.altitude_local, _x.altitude_relative, _x.altitude_terrain, _x.bottom_clearance, _x.origin_system_id, _x.target_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.time_usec, _x.altitude_monotonic, _x.altitude_amsl, _x.altitude_local, _x.altitude_relative, _x.altitude_terrain, _x.bottom_clearance, _x.origin_system_id, _x.target_system_id,) = _get_struct_Q6f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q6f2B = None
def _get_struct_Q6f2B():
    global _struct_Q6f2B
    if _struct_Q6f2B is None:
        _struct_Q6f2B = struct.Struct("<Q6f2B")
    return _struct_Q6f2B
