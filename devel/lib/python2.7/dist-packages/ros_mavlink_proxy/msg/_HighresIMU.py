# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/HighresIMU.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class HighresIMU(genpy.Message):
  _md5sum = "02e220874ef254dd246c5482f83c54a1"
  _type = "ros_mavlink_proxy/HighresIMU"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for HIGHRES_IMU ( #105 )
# zxzxzxzx

std_msgs/Header header

uint64 time_usec	#us	Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
float32 xacc		#m/s/s	X acceleration
float32 yacc		#m/s/s	Y acceleration
float32 zacc		#m/s/s	Z acceleration
float32 xgyro		#rad/s	Angular speed around X axis
float32 ygyro		#rad/s	Angular speed around Y axis
float32 zgyro		#rad/s	Angular speed around Z axis
float32 xmag		#gauss	X Magnetic field
float32 ymag		#gauss	Y Magnetic field
float32 zmag		#gauss	Z Magnetic field
float32 abs_pressure	#mbar	Absolute pressure
float32 diff_pressure	#mbar	Differential pressure
float32 pressure_alt	#	Altitude calculated from pressure
float32 temperature	#degC	Temperature
uint16 fields_updated	#	Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
uint8 id 		#       Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)

uint8 origin_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_usec','xacc','yacc','zacc','xgyro','ygyro','zgyro','xmag','ymag','zmag','abs_pressure','diff_pressure','pressure_alt','temperature','fields_updated','id','origin_system_id']
  _slot_types = ['std_msgs/Header','uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_usec,xacc,yacc,zacc,xgyro,ygyro,zgyro,xmag,ymag,zmag,abs_pressure,diff_pressure,pressure_alt,temperature,fields_updated,id,origin_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HighresIMU, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_usec is None:
        self.time_usec = 0
      if self.xacc is None:
        self.xacc = 0.
      if self.yacc is None:
        self.yacc = 0.
      if self.zacc is None:
        self.zacc = 0.
      if self.xgyro is None:
        self.xgyro = 0.
      if self.ygyro is None:
        self.ygyro = 0.
      if self.zgyro is None:
        self.zgyro = 0.
      if self.xmag is None:
        self.xmag = 0.
      if self.ymag is None:
        self.ymag = 0.
      if self.zmag is None:
        self.zmag = 0.
      if self.abs_pressure is None:
        self.abs_pressure = 0.
      if self.diff_pressure is None:
        self.diff_pressure = 0.
      if self.pressure_alt is None:
        self.pressure_alt = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.fields_updated is None:
        self.fields_updated = 0
      if self.id is None:
        self.id = 0
      if self.origin_system_id is None:
        self.origin_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_usec = 0
      self.xacc = 0.
      self.yacc = 0.
      self.zacc = 0.
      self.xgyro = 0.
      self.ygyro = 0.
      self.zgyro = 0.
      self.xmag = 0.
      self.ymag = 0.
      self.zmag = 0.
      self.abs_pressure = 0.
      self.diff_pressure = 0.
      self.pressure_alt = 0.
      self.temperature = 0.
      self.fields_updated = 0
      self.id = 0
      self.origin_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Q13fH2B().pack(_x.time_usec, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.xmag, _x.ymag, _x.zmag, _x.abs_pressure, _x.diff_pressure, _x.pressure_alt, _x.temperature, _x.fields_updated, _x.id, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.time_usec, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.xmag, _x.ymag, _x.zmag, _x.abs_pressure, _x.diff_pressure, _x.pressure_alt, _x.temperature, _x.fields_updated, _x.id, _x.origin_system_id,) = _get_struct_Q13fH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Q13fH2B().pack(_x.time_usec, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.xmag, _x.ymag, _x.zmag, _x.abs_pressure, _x.diff_pressure, _x.pressure_alt, _x.temperature, _x.fields_updated, _x.id, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.time_usec, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.xmag, _x.ymag, _x.zmag, _x.abs_pressure, _x.diff_pressure, _x.pressure_alt, _x.temperature, _x.fields_updated, _x.id, _x.origin_system_id,) = _get_struct_Q13fH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q13fH2B = None
def _get_struct_Q13fH2B():
    global _struct_Q13fH2B
    if _struct_Q13fH2B is None:
        _struct_Q13fH2B = struct.Struct("<Q13fH2B")
    return _struct_Q13fH2B
