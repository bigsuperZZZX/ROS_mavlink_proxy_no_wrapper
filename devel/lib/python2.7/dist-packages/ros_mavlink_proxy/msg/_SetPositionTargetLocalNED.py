# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_mavlink_proxy/SetPositionTargetLocalNED.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SetPositionTargetLocalNED(genpy.Message):
  _md5sum = "3b8a5a72650c18aafb7440081d6b074e"
  _type = "ros_mavlink_proxy/SetPositionTargetLocalNED"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for SET_POSITION_TARGET_LOCAL_NED ( #84 )
# "NED" is the name of a coordinate system
# zxzxzxzx

std_msgs/Header header

uint32 time_boot_ms       #ms		Timestamp (time since system boot).
uint8 target_system       #		System ID
uint8 target_component    #		Component ID
uint8 coordinate_frame    #       	Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
uint16 type_mask          #		POSITION_TARGET_TYPEMASK	Bitmap to indicate which dimensions should be ignored by the vehicle.
float32 x                     #m		X Position in NED frame
float32 y                     #m		Y Position in NED frame
float32 z                     #m		Z Position in NED frame (note, altitude is negative in NED)
float32 vx                    #m/s	X velocity in NED frame
float32 vy                    #m/s	Y velocity in NED frame
float32 vz                    #m/s	Z velocity in NED frame
float32 afx                   #m/s/s	X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 afy                   #m/s/s	Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 afz                   #m/s/s	Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
float32 yaw                   #rad	yaw setpoint
float32 yaw_rate              #rad/s	yaw rate setpoint

uint8 origin_system_id

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','time_boot_ms','target_system','target_component','coordinate_frame','type_mask','x','y','z','vx','vy','vz','afx','afy','afz','yaw','yaw_rate','origin_system_id']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint8','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_boot_ms,target_system,target_component,coordinate_frame,type_mask,x,y,z,vx,vy,vz,afx,afy,afz,yaw,yaw_rate,origin_system_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetPositionTargetLocalNED, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.coordinate_frame is None:
        self.coordinate_frame = 0
      if self.type_mask is None:
        self.type_mask = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.afx is None:
        self.afx = 0.
      if self.afy is None:
        self.afy = 0.
      if self.afz is None:
        self.afz = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.origin_system_id is None:
        self.origin_system_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_boot_ms = 0
      self.target_system = 0
      self.target_component = 0
      self.coordinate_frame = 0
      self.type_mask = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.afx = 0.
      self.afy = 0.
      self.afz = 0.
      self.yaw = 0.
      self.yaw_rate = 0.
      self.origin_system_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3BH11fB().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id,) = _get_struct_I3BH11fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3BH11fB().pack(_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.time_boot_ms, _x.target_system, _x.target_component, _x.coordinate_frame, _x.type_mask, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.afx, _x.afy, _x.afz, _x.yaw, _x.yaw_rate, _x.origin_system_id,) = _get_struct_I3BH11fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3BH11fB = None
def _get_struct_I3BH11fB():
    global _struct_I3BH11fB
    if _struct_I3BH11fB is None:
        _struct_I3BH11fB = struct.Struct("<I3BH11fB")
    return _struct_I3BH11fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
