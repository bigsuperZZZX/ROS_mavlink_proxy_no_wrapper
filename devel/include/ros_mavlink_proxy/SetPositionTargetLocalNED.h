// Generated by gencpp from file ros_mavlink_proxy/SetPositionTargetLocalNED.msg
// DO NOT EDIT!


#ifndef ROS_MAVLINK_PROXY_MESSAGE_SETPOSITIONTARGETLOCALNED_H
#define ROS_MAVLINK_PROXY_MESSAGE_SETPOSITIONTARGETLOCALNED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_mavlink_proxy
{
template <class ContainerAllocator>
struct SetPositionTargetLocalNED_
{
  typedef SetPositionTargetLocalNED_<ContainerAllocator> Type;

  SetPositionTargetLocalNED_()
    : header()
    , time_boot_ms(0)
    , target_system(0)
    , target_component(0)
    , coordinate_frame(0)
    , type_mask(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , afx(0.0)
    , afy(0.0)
    , afz(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , origin_system_id(0)  {
    }
  SetPositionTargetLocalNED_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_boot_ms(0)
    , target_system(0)
    , target_component(0)
    , coordinate_frame(0)
    , type_mask(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , afx(0.0)
    , afy(0.0)
    , afz(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , origin_system_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_boot_ms_type;
  _time_boot_ms_type time_boot_ms;

   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef uint8_t _coordinate_frame_type;
  _coordinate_frame_type coordinate_frame;

   typedef uint16_t _type_mask_type;
  _type_mask_type type_mask;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _afx_type;
  _afx_type afx;

   typedef float _afy_type;
  _afy_type afy;

   typedef float _afz_type;
  _afz_type afz;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef uint8_t _origin_system_id_type;
  _origin_system_id_type origin_system_id;





  typedef boost::shared_ptr< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> const> ConstPtr;

}; // struct SetPositionTargetLocalNED_

typedef ::ros_mavlink_proxy::SetPositionTargetLocalNED_<std::allocator<void> > SetPositionTargetLocalNED;

typedef boost::shared_ptr< ::ros_mavlink_proxy::SetPositionTargetLocalNED > SetPositionTargetLocalNEDPtr;
typedef boost::shared_ptr< ::ros_mavlink_proxy::SetPositionTargetLocalNED const> SetPositionTargetLocalNEDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_mavlink_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_mavlink_proxy': ['/home/myros/PX4learn/ROS_mavlink_proxy/src/ros_mavlink_proxy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b8a5a72650c18aafb7440081d6b074e";
  }

  static const char* value(const ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b8a5a72650c18aaULL;
  static const uint64_t static_value2 = 0xfb7440081d6b074eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mavlink_proxy/SetPositionTargetLocalNED";
  }

  static const char* value(const ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for SET_POSITION_TARGET_LOCAL_NED ( #84 )\n\
# \"NED\" is the name of a coordinate system\n\
# zxzxzxzx\n\
\n\
std_msgs/Header header\n\
\n\
uint32 time_boot_ms       #ms		Timestamp (time since system boot).\n\
uint8 target_system       #		System ID\n\
uint8 target_component    #		Component ID\n\
uint8 coordinate_frame    #       	Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9\n\
uint16 type_mask          #		POSITION_TARGET_TYPEMASK	Bitmap to indicate which dimensions should be ignored by the vehicle.\n\
float32 x                     #m		X Position in NED frame\n\
float32 y                     #m		Y Position in NED frame\n\
float32 z                     #m		Z Position in NED frame (note, altitude is negative in NED)\n\
float32 vx                    #m/s	X velocity in NED frame\n\
float32 vy                    #m/s	Y velocity in NED frame\n\
float32 vz                    #m/s	Z velocity in NED frame\n\
float32 afx                   #m/s/s	X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N\n\
float32 afy                   #m/s/s	Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N\n\
float32 afz                   #m/s/s	Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N\n\
float32 yaw                   #rad	yaw setpoint\n\
float32 yaw_rate              #rad/s	yaw rate setpoint\n\
\n\
uint8 origin_system_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_boot_ms);
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.coordinate_frame);
      stream.next(m.type_mask);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.afx);
      stream.next(m.afy);
      stream.next(m.afz);
      stream.next(m.yaw);
      stream.next(m.yaw_rate);
      stream.next(m.origin_system_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPositionTargetLocalNED_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mavlink_proxy::SetPositionTargetLocalNED_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_boot_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_boot_ms);
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "coordinate_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_frame);
    s << indent << "type_mask: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type_mask);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "afx: ";
    Printer<float>::stream(s, indent + "  ", v.afx);
    s << indent << "afy: ";
    Printer<float>::stream(s, indent + "  ", v.afy);
    s << indent << "afz: ";
    Printer<float>::stream(s, indent + "  ", v.afz);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "origin_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.origin_system_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MAVLINK_PROXY_MESSAGE_SETPOSITIONTARGETLOCALNED_H
