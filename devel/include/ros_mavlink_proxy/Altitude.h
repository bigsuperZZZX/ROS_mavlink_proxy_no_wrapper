// Generated by gencpp from file ros_mavlink_proxy/Altitude.msg
// DO NOT EDIT!


#ifndef ROS_MAVLINK_PROXY_MESSAGE_ALTITUDE_H
#define ROS_MAVLINK_PROXY_MESSAGE_ALTITUDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_mavlink_proxy
{
template <class ContainerAllocator>
struct Altitude_
{
  typedef Altitude_<ContainerAllocator> Type;

  Altitude_()
    : header()
    , time_usec(0)
    , altitude_monotonic(0.0)
    , altitude_amsl(0.0)
    , altitude_local(0.0)
    , altitude_relative(0.0)
    , altitude_terrain(0.0)
    , bottom_clearance(0.0)
    , origin_system_id(0)
    , target_system_id(0)  {
    }
  Altitude_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_usec(0)
    , altitude_monotonic(0.0)
    , altitude_amsl(0.0)
    , altitude_local(0.0)
    , altitude_relative(0.0)
    , altitude_terrain(0.0)
    , bottom_clearance(0.0)
    , origin_system_id(0)
    , target_system_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _time_usec_type;
  _time_usec_type time_usec;

   typedef float _altitude_monotonic_type;
  _altitude_monotonic_type altitude_monotonic;

   typedef float _altitude_amsl_type;
  _altitude_amsl_type altitude_amsl;

   typedef float _altitude_local_type;
  _altitude_local_type altitude_local;

   typedef float _altitude_relative_type;
  _altitude_relative_type altitude_relative;

   typedef float _altitude_terrain_type;
  _altitude_terrain_type altitude_terrain;

   typedef float _bottom_clearance_type;
  _bottom_clearance_type bottom_clearance;

   typedef uint8_t _origin_system_id_type;
  _origin_system_id_type origin_system_id;

   typedef uint8_t _target_system_id_type;
  _target_system_id_type target_system_id;





  typedef boost::shared_ptr< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> const> ConstPtr;

}; // struct Altitude_

typedef ::ros_mavlink_proxy::Altitude_<std::allocator<void> > Altitude;

typedef boost::shared_ptr< ::ros_mavlink_proxy::Altitude > AltitudePtr;
typedef boost::shared_ptr< ::ros_mavlink_proxy::Altitude const> AltitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mavlink_proxy::Altitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_mavlink_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_mavlink_proxy': ['/home/myros/PX4learn/ROS_mavlink_proxy/src/ros_mavlink_proxy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68ad96eb6432bcb3e2b661f47f5f0f0b";
  }

  static const char* value(const ::ros_mavlink_proxy::Altitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68ad96eb6432bcb3ULL;
  static const uint64_t static_value2 = 0xe2b661f47f5f0f0bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mavlink_proxy/Altitude";
  }

  static const char* value(const ::ros_mavlink_proxy::Altitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for ALTITUDE ( #141 )\n\
# zxzxzxzx\n\
\n\
std_msgs/Header header\n\
\n\
uint64 time_usec		#us	Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.\n\
float32 altitude_monotonic	#m	This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.\n\
float32 altitude_amsl		#m	This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.\n\
float32 altitude_local		#m	This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.\n\
float32 altitude_relative		#m	This is the altitude above the home position. It resets on each change of the current home position.\n\
float32 altitude_terrain		#m	This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.\n\
float32 bottom_clearance		#m	This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.\n\
\n\
uint8 origin_system_id\n\
uint8 target_system_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_mavlink_proxy::Altitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_usec);
      stream.next(m.altitude_monotonic);
      stream.next(m.altitude_amsl);
      stream.next(m.altitude_local);
      stream.next(m.altitude_relative);
      stream.next(m.altitude_terrain);
      stream.next(m.bottom_clearance);
      stream.next(m.origin_system_id);
      stream.next(m.target_system_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Altitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mavlink_proxy::Altitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mavlink_proxy::Altitude_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_usec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "altitude_monotonic: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_monotonic);
    s << indent << "altitude_amsl: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_amsl);
    s << indent << "altitude_local: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_local);
    s << indent << "altitude_relative: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_relative);
    s << indent << "altitude_terrain: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_terrain);
    s << indent << "bottom_clearance: ";
    Printer<float>::stream(s, indent + "  ", v.bottom_clearance);
    s << indent << "origin_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.origin_system_id);
    s << indent << "target_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MAVLINK_PROXY_MESSAGE_ALTITUDE_H
