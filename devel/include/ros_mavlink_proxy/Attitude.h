// Generated by gencpp from file ros_mavlink_proxy/Attitude.msg
// DO NOT EDIT!


#ifndef ROS_MAVLINK_PROXY_MESSAGE_ATTITUDE_H
#define ROS_MAVLINK_PROXY_MESSAGE_ATTITUDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_mavlink_proxy
{
template <class ContainerAllocator>
struct Attitude_
{
  typedef Attitude_<ContainerAllocator> Type;

  Attitude_()
    : header()
    , time_boot_ms(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , rollspeed(0.0)
    , pitchspeed(0.0)
    , yawspeed(0.0)
    , origin_system_id(0)
    , target_system_id(0)  {
    }
  Attitude_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_boot_ms(0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , rollspeed(0.0)
    , pitchspeed(0.0)
    , yawspeed(0.0)
    , origin_system_id(0)
    , target_system_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_boot_ms_type;
  _time_boot_ms_type time_boot_ms;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _rollspeed_type;
  _rollspeed_type rollspeed;

   typedef float _pitchspeed_type;
  _pitchspeed_type pitchspeed;

   typedef float _yawspeed_type;
  _yawspeed_type yawspeed;

   typedef uint8_t _origin_system_id_type;
  _origin_system_id_type origin_system_id;

   typedef uint8_t _target_system_id_type;
  _target_system_id_type target_system_id;





  typedef boost::shared_ptr< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> const> ConstPtr;

}; // struct Attitude_

typedef ::ros_mavlink_proxy::Attitude_<std::allocator<void> > Attitude;

typedef boost::shared_ptr< ::ros_mavlink_proxy::Attitude > AttitudePtr;
typedef boost::shared_ptr< ::ros_mavlink_proxy::Attitude const> AttitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mavlink_proxy::Attitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_mavlink_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_mavlink_proxy': ['/home/myros/PX4learn/ROS_mavlink_proxy/src/ros_mavlink_proxy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac2d717021150553bfe16ffa8c2170f1";
  }

  static const char* value(const ::ros_mavlink_proxy::Attitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac2d717021150553ULL;
  static const uint64_t static_value2 = 0xbfe16ffa8c2170f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mavlink_proxy/Attitude";
  }

  static const char* value(const ::ros_mavlink_proxy::Attitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for ATTITUDE ( #30 )\n\
# zxzxzxzx\n\
\n\
std_msgs/Header header\n\
\n\
\n\
uint32 time_boot_ms	#ms	Timestamp (time since system boot).\n\
float32 roll		#rad	Roll angle (-pi..+pi)\n\
float32 pitch		#rad	Pitch angle (-pi..+pi)\n\
float32 yaw		#rad	Yaw angle (-pi..+pi)\n\
float32 rollspeed		#rad/s	Roll angular speed\n\
float32 pitchspeed	#rad/s	Pitch angular speed\n\
float32 yawspeed		#rad/s	Yaw angular speed\n\
\n\
uint8 origin_system_id\n\
uint8 target_system_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_mavlink_proxy::Attitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_boot_ms);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.rollspeed);
      stream.next(m.pitchspeed);
      stream.next(m.yawspeed);
      stream.next(m.origin_system_id);
      stream.next(m.target_system_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Attitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mavlink_proxy::Attitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mavlink_proxy::Attitude_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_boot_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_boot_ms);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "rollspeed: ";
    Printer<float>::stream(s, indent + "  ", v.rollspeed);
    s << indent << "pitchspeed: ";
    Printer<float>::stream(s, indent + "  ", v.pitchspeed);
    s << indent << "yawspeed: ";
    Printer<float>::stream(s, indent + "  ", v.yawspeed);
    s << indent << "origin_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.origin_system_id);
    s << indent << "target_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MAVLINK_PROXY_MESSAGE_ATTITUDE_H
