// Generated by gencpp from file ros_mavlink_proxy/GlobalPositionINT.msg
// DO NOT EDIT!


#ifndef ROS_MAVLINK_PROXY_MESSAGE_GLOBALPOSITIONINT_H
#define ROS_MAVLINK_PROXY_MESSAGE_GLOBALPOSITIONINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_mavlink_proxy
{
template <class ContainerAllocator>
struct GlobalPositionINT_
{
  typedef GlobalPositionINT_<ContainerAllocator> Type;

  GlobalPositionINT_()
    : header()
    , time_boot_ms(0)
    , lat(0)
    , lon(0)
    , alt(0)
    , relative_alt(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , hdg(0)
    , origin_system_id(0)  {
    }
  GlobalPositionINT_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_boot_ms(0)
    , lat(0)
    , lon(0)
    , alt(0)
    , relative_alt(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , hdg(0)
    , origin_system_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_boot_ms_type;
  _time_boot_ms_type time_boot_ms;

   typedef int32_t _lat_type;
  _lat_type lat;

   typedef int32_t _lon_type;
  _lon_type lon;

   typedef int32_t _alt_type;
  _alt_type alt;

   typedef int32_t _relative_alt_type;
  _relative_alt_type relative_alt;

   typedef int16_t _vx_type;
  _vx_type vx;

   typedef int16_t _vy_type;
  _vy_type vy;

   typedef int16_t _vz_type;
  _vz_type vz;

   typedef uint16_t _hdg_type;
  _hdg_type hdg;

   typedef uint8_t _origin_system_id_type;
  _origin_system_id_type origin_system_id;





  typedef boost::shared_ptr< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPositionINT_

typedef ::ros_mavlink_proxy::GlobalPositionINT_<std::allocator<void> > GlobalPositionINT;

typedef boost::shared_ptr< ::ros_mavlink_proxy::GlobalPositionINT > GlobalPositionINTPtr;
typedef boost::shared_ptr< ::ros_mavlink_proxy::GlobalPositionINT const> GlobalPositionINTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_mavlink_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ros_mavlink_proxy': ['/home/myros/PX4learn/ROS_mavlink_proxy/src/ros_mavlink_proxy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cff51bdfb07d5e1d0adb9ed0fb44f2f8";
  }

  static const char* value(const ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcff51bdfb07d5e1dULL;
  static const uint64_t static_value2 = 0x0adb9ed0fb44f2f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mavlink_proxy/GlobalPositionINT";
  }

  static const char* value(const ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for GLOBAL_POSITION_INT ( #33 )\n\
# \"INT\" is the name of a coordinate system\n\
# zxzxzxzx\n\
std_msgs/Header header\n\
\n\
uint32 time_boot_ms	#ms	Timestamp (time since system boot).\n\
int32 lat		#degE7	Latitude, expressed\n\
int32 lon		#degE7	Longitude, expressed\n\
int32 alt		#mm	Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.\n\
int32 relative_alt	#mm	Altitude above ground\n\
int16 vx		#cm/s	Ground X Speed (Latitude, positive north)\n\
int16 vy		#cm/s	Ground Y Speed (Longitude, positive east)\n\
int16 vz		#cm/s	Ground Z Speed (Altitude, positive down)\n\
uint16 hdg		#cdeg	Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX\n\
\n\
uint8 origin_system_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_boot_ms);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.relative_alt);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.hdg);
      stream.next(m.origin_system_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPositionINT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mavlink_proxy::GlobalPositionINT_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_boot_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_boot_ms);
    s << indent << "lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alt);
    s << indent << "relative_alt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.relative_alt);
    s << indent << "vx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vz);
    s << indent << "hdg: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hdg);
    s << indent << "origin_system_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.origin_system_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MAVLINK_PROXY_MESSAGE_GLOBALPOSITIONINT_H
